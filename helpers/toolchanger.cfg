[gcode_macro _toolchanger_helper_macros]
gcode:
    #===========================================================================================< LOCALS/SETTINGS

    {%- set _cache = namespace(tn=None) -%}
    #===========================================================================================< IO/INTERNALS

    #────────────────────────────────────────────────────< RESPOND HELPERS
    {%- macro respond_colored(msg, prefix, color) -%}
        {- action_respond_info('<span class="' ~ color ~ '">' ~ ('<strong>' ~ prefix|trim ~ ' </strong>' if prefix else '') ~ msg ~ '</span>') -}
    {%- endmacro -%}

    {%- macro _msg_info(msg = '') -%}                     {- action_respond_info(msg) -}                       {%- endmacro -%}
    {%- macro _msg_warn(msg = '', prefix='[Warning]') -%} {- respond_colored(msg, prefix, 'warning--text') -}  {%- endmacro -%}
    {%- macro _msg_error(msg = '', prefix='[ERROR]')  -%} {- respond_colored(msg, prefix, 'error--text') -}    {%- endmacro -%}
    {%- macro _raise_error(msg = '') -%}                  {- action_raise_error(msg) -}                        {%- endmacro -%}

    # ---< error proof divide
    {%- macro divide(numerator, denominator, precision=3) -%}
        {%- set num, den, result = numerator|float(None), denominator|float(None), numerator -%}
        {%- if num is none or den is none -%} {- _msg_warn("cannot perform" ~ numerator ~ "/" ~ denominator, '[DIV_ERR]') -}
        {%- elif den == 0.0 -%} {- _msg_warn("(" ~ numerator ~ "/" ~ denominator ~ ")", '[DIV_BY_0]') -}
        {%- else -%}{%- set result = (num / den)|round(precision|int(3)) -%}{%- endif -%}
        {result}
    {%- endmacro -%}

    #===========================================================================================< TRANSLATION/LOOKUP HELPER

    #────────────────────────────────────────────────────< EASY LOOKUP
    # ---< searches for the number if its present in tool probes
    {%- macro get_probe_name_from_tn(tool_number) -%}
        {%- set found = [] -%}
        {%- for k, v in printer.configfile.settings.items() if k[:11] == 'tool_probe ' and v.tool|default(-1) == tool_number|int -%}
            {%- set _ = found.append(k) -%}
        {%- endfor -%}
        {- _msg_error("Multiple probes found for tool_number " ~ tool_number) if found|length > 1 else '' -}
        {found[0] if found else _msg_error("cannot find probe for tool '" ~ tool_number ~ "'")}
    {%- endmacro -%}

    # ---< gets the target from a tn
    {%- macro get_tool_target(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].target}
        {%- else -%}{-1}{_msg_warn("cannot get tool '" ~ tool_number ~ "' target, has extruder")}{%- endif -%}
    {%- endmacro -%}

    # ---< gets the temp from a tn
    {%- macro get_tool_temp(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {printer[extruder_name].temperature}
        {%- else -%}{-1}{_msg_warn("cannot get tool '" ~ tool_number ~ "' temp, has extruder")}{%- endif -%}
    {%- endmacro -%}

    # ---< just tells you if it can extrude.
    {%- macro tool_can_extrude(tool_number) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set extruder_name = printer[tool_name].extruder -%}
        {%- if extruder_name and extruder_name in printer -%}
            {'True' if printer[extruder_name].can_extrude else ''}
        {%- else -%}{_msg_warn("cannot get tool '" ~ tool_number ~ "' extruder")}{%- endif -%}
    {%- endmacro -%}
    #────────────────────────────────────────────────────< LIVE STATE LOOKUP/EDIT
    
    # ---< actively pulls in a fresh result and caches it (state wont change in this ref frame, no need to repoll)
    {%- macro get_mounted_tn() -%}
        {%- if _cache.tn is none -%}
            {%- set tpe_obj = printer.printer.lookup_object('tool_probe_endstop') -%}
            {%- set probes = tpe_obj._query_open_tools() -%}
            {%- if probes|length == 1 -%}
                {%- set _ = tpe_obj.set_active_probe(probes[0]) -%}
                {%- set _cache.tn = probes[0].tool -%}
            {%- else -%}
                {%- set _cache.tn = -1 -%}
            {%- endif -%}
            {%- if probes|length > 1 -%}{_msg_warn("Multiple active tool probes!? please check your hardware/config!")}{%- endif -%}
        {%- endif -%}
        {%- set _ = printer.tool_probe_endstop.update({'active_tool_number': _cache.tn|int}) -%}
        {_cache.tn}
    {%- endmacro -%}


    #────────────────────────────────────────────────────< ACCELERATION SHIZZLE
    {%- macro try_divide_accel(accel_divide_override=None) -%}
        {%- if printer.print_stats.state|lower != "printing" -%}
            {%- set tcs = printer['gcode_macro _toolchanger_settings'] -%}
            {%- set divider = accel_divide_override|float(tcs.get('macro_accel_divider', None)|float(None)) -%}
            {%- if divider is not none and divider > 1.0 -%}
                {divide_vel(accel_divide=divider)}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro divide_vel(vel_divide=1.0, accel_divide=1.0) -%}
        {%- set accel    = printer.toolchanger.params_fast_accel|default(printer.configfile.config.printer.max_accel)|float    -%}
        {%- set velocity = printer.toolchanger.params_fast_speed|default(printer.configfile.config.printer.max_velocity)|float -%}
        SET_VELOCITY_LIMIT VELOCITY={divide(velocity, vel_divide)} ACCEL={divide(accel, accel_divide)}
    {%- endmacro -%}

    {%- macro restore_vel() -%}
        SET_VELOCITY_LIMIT VELOCITY={printer.toolhead.max_velocity} ACCEL={printer.toolhead.max_accel}
    {%- endmacro -%}

    #===========================================================================================< INTERNAL VARIABLE HELPERS

    # ---< gcode command + "live" update
    {%- macro _sync_set_gcode_var(macro_name, var_name, value) -%}
        {%- set macro = printer['gcode_macro ' ~ (macro_name|replace('gcode_macro ', ''))] -%}
        {%- set _ = macro.update({var_name: value}) if macro[var_name] is mapping else macro.__setitem__(var_name, value) -%}
        SET_GCODE_VARIABLE MACRO="{macro_name|replace('gcode_macro ', '')}" VARIABLE="{var_name}" VALUE="{value}"
    {%- endmacro -%}

    # ---< gcode command + "live" update
    {%- macro _sync_set_svf_var(var_name, value) -%}
        {%- set svf = printer.save_variables.variables -%}
        {%- set _ = svf.update({var_name: value}) if svf[var_name] is mapping else svf.__setitem__(var_name, value) -%}
        SAVE_VARIABLE VARIABLE={var_name} VALUE="{value}"
    {%- endmacro -%}

    # ---< recursively rounds all values in a dict in place
    {%- macro _deep_round_inplace(data, precision) -%}
        {%- for k, v in data.items() if data is mapping -%}
            {%- if v is mapping -%}
                {_deep_round_inplace(v, precision)}
            {%- elif v is number -%}
                {%- set _ = data.update({k: v|float|round(precision)}) -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endmacro -%}

    # ---< safely iterates into nested structures leaving default dicks behind
    {%- macro _nested_set(mutable=none, path=none, value=None, rounding=4) -%}
        {%- set local = namespace(pointer=mutable) -%}
        {%- for key in path if path is not none and mutable is mapping -%}
            {%- if not loop.last -%}
                {%- set local.pointer = local.pointer.setdefault(key, {}) -%}
            {%- else -%}
                {%- set value = value|float|round(rounding) if value is number else value -%}
                {%- set _ = local.pointer.update({path[-1]: value}) -%}
            {%- endif -%}
        {%- else -%}
            {_msg_warn('internal error, missing mutable or path', '_nested_set')}
        {%- endfor -%}
    {%- endmacro -%}

    #===========================================================================================< GCODE VARIABLES HELPERS

    {%- macro gcode_var_update(macro_name=none, var_path=none, value=none, rounding=4) -%}
        {%- if macro_name is none or var_path is none or value is none -%}
            {- _msg_warn("missing any of macro_name, var_path, value", 'gcode_var_update') -}
        {%- else -%}
            {%- set macro_key = 'gcode_macro ' ~ macro_name -%}
            {%- set parts     = (var_path|string|trim).split('.') -%}
            {%- set var_name  = parts.pop(0) -%}
            {%- if macro_key not in printer or var_name not in printer[macro_key] -%}
                {- _msg_warn("couldn't find macro " ~ macro_name ~ " in printer or " ~ var_name ~ " in macro", 'gcode_var_update') -}
            {%- else -%}
                {%- set root_data  = printer[macro_key].get(var_name, {}) -%}
                {%- set root_data  = root_data.copy() if root_data is mapping else {} -%} # ensure dick
                {%- if parts -%}
                    {_nested_set(root_data, parts, value)}
                {%- elif value is mapping and root_data is mapping -%}
                    {%- set _ = root_data.update(value) -%}
                {%- else -%}
                    {%- set root_data = (value|float|round(rounding)) if value is number else value -%}
                {%- endif -%}
                {_sync_set_gcode_var(macro_name, var_name, root_data)}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    # ---< save to variable while also keeping state locally (no issues with saving and restoring in the same exec frame)
    {%- macro save_tool_targets_to_variable(macro, variable, turn_heaters_off = False) -%}
        {%- if "gcode_macro " ~ macro in printer and variable|string|lower in printer["gcode_macro " ~ macro] -%}
            {%- set original = printer["gcode_macro " ~ macro].get(variable|string|lower, {}) -%}
            {%- set temps = original if original is mapping else {} -%}
            {%- for tn in printer.toolchanger.tool_numbers -%}
                {%- set _ = temps.update({tn: get_tool_target(tn)|float}) -%}
                {- 'M104 T' ~ tn ~ ' S0' if turn_heaters_off else '' -}
            {%- endfor -%}
            {- _sync_set_gcode_var(macro, variable, temps) -}
        {%- else -%}
            {- _msg_warn("macro '" ~ macro ~ "' not found in printer or variable '" ~ variable ~ "' not found in macro", 'save_tool_targets_to_variable') -}
        {%- endif -%}
    {%- endmacro -%}

    # ---< restores from variable (or this local frame)
    {%- macro restore_tool_targets_from_variable(macro, variable, command='M104', tool_number=printer.toolchanger.tool_numbers) -%}
        {%- if "gcode_macro " ~ macro in printer and variable|string|lower in printer["gcode_macro " ~ macro] -%}
            {%- set saved_temps = printer["gcode_macro " ~ macro].get(variable|string|lower, {}) -%}
            {%- for tn, temp in saved_temps.items() if saved_temps and saved_temps is mapping and (tn == tool_number|int(-1) if tool_number is number else tn in tool_number) -%}
                {-command ~ ' T' ~ tn ~ ' S' ~ temp-}
            {%- else -%}
                {- _msg_warn("Data in '" ~ variable ~ "' is not a valid temperature dictionary.") -}
            {%- endfor -%}
        {%- else -%}
            {- _msg_warn("Cannot restore temps: macro '" ~ macro ~ "' or variable '" ~ variable ~ "' not found. (or empty/not mapping)", 'restore_tool_targets_from_variable') -}
        {%- endif -%}
    {%- endmacro -%}

    #===========================================================================================< STATE CHECKING
    {%- macro check_homed() -%}
        {%- if printer.toolhead.homed_axes != "xyz" -%}
            {%- if printer.configfile.settings.toolchanger.on_axis_not_homed == 'home' -%}
                {- _msg_info("Homing first...") -}
                G28
            {%- else -%}
                {- _raise_error("Printer must be homed first.") -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_tc_status() -%}
        {%- if printer.toolchanger.status == 'uninitialized' -%}
            {- _msg_info("Toolchanger uninitialized, attempting to initialize...") -}
            INITIALIZE_TOOLCHANGER
        {%- elif printer.toolchanger.status == 'error' -%}
            {- _raise_error("Toolchanger is in an error state.") -}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_tn_actn() -%}
        {%- set tn = printer.toolchanger.tool_number|int -%}
        {%- set actn = printer.tool_probe_endstop.active_tool_number|int -%}
        {%- if tn != actn or actn == -1 or tn == -1 -%}
            {- _msg_info("Something seems wrong here... trying to recover") -}
            {%- set actn = get_mounted_tn()|int -%}
            {%- if actn != -1 -%}
                INITIALIZE_TOOLCHANGER T={actn}
            {%- else -%}
                {- _raise_error("Nope... definetly no tool on there right now.") -}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro check_ok() -%}
        {check_tc_status()}
        {check_homed()}
        {check_tn_actn()}
    {%- endmacro -%}


    #===========================================================================================< UPDATE INTERNALS HELPERS
    #───────────────────< push SVF probe offset -> tool probe offset >────────────────────
    {%- macro update_tool_probe_from_svf(tool_number, respond=_msg_info, respond_warn=_msg_warn) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = printer.save_variables.variables.get(svf_key, {}) -%}
        {%- if 'probe' in offsets and (offsets.probe is number) -%}
            {%- set probe_obj = printer.printer.lookup_object('tool_probe_endstop').tool_probes[tool_number|int] -%}
            {%- set _ = probe_obj.probe_offsets.__setattr__('z_offset', offsets.probe) -%}
            {respond("Applied probe offset for " ~ probe_obj.name ~ " (" ~ offsets.probe ~ ")")}
        {%- else -%}
            {respond_warn("Missing probe offset for " ~ tool_name ~ " in " ~ svf_key)}
        {%- endif -%}
    {%- endmacro -%}

    #───────────────────< push tools SVF gcode offsets -> toolchanger tools gcode offsets >────────────────────
    {%- macro update_tool_offsets_from_svf(tool_number, respond=_msg_info, respond_warn=_msg_warn) -%}
        {%- set tool_name = printer.toolchanger.tool_names[tool_number|int] -%}
        {%- set tool_obj = printer.printer.lookup_object(tool_name, None) -%}
        {%- set svf_key = 'offsets_' ~ tool_name|replace('tool ', '')|lower -%}
        {%- set offsets = printer.save_variables.variables.get(svf_key, {}) -%}
        {%- set applied_offsets = [] -%}
        {%- for axis in ['x', 'y', 'z'] if axis in offsets -%}
            {%- set _ = tool_obj.__setattr__('gcode_' ~ axis ~ '_offset', offsets[axis]) -%}
            {%- set _ = applied_offsets.append(axis|upper ~ "=" ~ offsets[axis]) -%}
        {%- else -%}
            {- respond_warn("Missing offsets for " ~ tool_name ~ " in " ~ svf_key) -}
        {%- endfor -%}
        {%- if applied_offsets -%}
            {- respond("Applied gcode offsets for " ~ tool_name ~ ": " ~ (applied_offsets|join(', '))) -}
        {%- endif -%}
    {%- endmacro -%}

    #───────────────────< push SVF calibration probes TTBZ -> tools calibrate trigger to bottom z >────────────────────
    {%- macro update_ttbz_from_svf(respond=_msg_info, respond_warn=_msg_warn) -%}
        {%- set probe_pos  = printer.save_variables.variables.get('probe_position', {}) -%}
        {%- set ttbz = probe_pos.get('trigger_to_bottom_z', None) -%}
        {%- if ttbz is not none -%}
            {%- set _ = printer.printer.lookup_object('tools_calibrate').__setattr__('trigger_to_bottom_z', ttbz|float) -%}
            {- respond("Updated trigger_to_bottom_z (" ~ ttbz ~ ")") -}
        {%- else -%}
            {- respond_warn("Failed to update ttbz") -}
        {%- endif -%}
    {%- endmacro -%}


    #===========================================================================================< DIRECT CALL/TESTING
    {%- if rawparams and 'DATA' in params -%}
        {_msg_info("returned: " ~ self._TemplateReference__context[params.MACRO](params.DATA))}
    {%- elif rawparams and 'MACRO' in params -%}
        {_msg_info("returned: " ~ self._TemplateReference__context[params.MACRO]())}
    {%- endif -%}
