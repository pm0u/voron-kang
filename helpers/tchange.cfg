[gcode_macro _toolchange_helper_macros]
gcode:
  {%- macro before_change(tool) -%}
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
      SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}
  {%- endmacro %}
  
  {%- macro after_change(tool) %}
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    {% if tool.params_input_shaper_freq_x %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={tool.params_damping_ratio_x} DAMPING_RATIO_Y={tool.params_damping_ratio_y}
    {% endif %}
  {%- endmacro -%}
  
  {%- macro dropoff(tool) -%}
    {%- import led as led with context -%}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    SET_SKEW CLEAR=1
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    #  ############## Run the path ##############
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
    {% endfor %}

    {% set used_tools = printer['gcode_macro PRINT_START'].variable_used_tools %}
    {% set printing = printer['gcode_macro PRINT_START'].variable_printing %}
    {% if printing and tool_number in used_tools %}
      {led.idle(tool.tool_number)}
    {% else %}
      {led.inactive(tool.tool_number)}
    {% endif %}

    ## Return to safe Y if no pickup_tool
    {% if pickup_tool is none %}
      G0 Y{tool.params_safe_y} F{fast}
    {% endif %}
  {%- endmacro %}
  
  {%- macro pickup(tool) -%}
    {%- import led as led with context -%}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_pickup_path %}
    {led.waiting(tool.tool_number)}
    {% set restore_position = printer.gcode_move.gcode_position %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0

    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
      # temp wait, but with deadband since this will likely stabilize by the time we print with it
      M109 T{tool.tool_number} S{printer[tool.extruder].target|int} D5
    {% endif %}

    # Run the path
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
      {% if 'verify' in pos %}
        VERIFY_TOOL_DETECTED T={tool.tool_number}
        {led.active(tool.tool_number)}
      {% endif %}
    {% endfor %}

    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
    {% if 'Z' in restore_position %}
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
    {% endif %}
    ROUNDED_G0 D=0
    
    # restore skew
    {% if printer['gcode_macro PRINT_START'].printing %}
      SKEW_PROFILE LOAD=calilantern_skew_profile
    {% endif %}
  {%- endmacro -%}