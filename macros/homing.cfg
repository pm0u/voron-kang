[homing_override]
axes: xyz
gcode:
  _INITIALIZE_FROM_DETECTED_TOOL
  {% if printer.probe.last_query  %}
         RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
  {% else %}
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    {% if home_all %}
      G90 ; absolute mode
      G28 Z
      G0 Z10 F1000
    {% endif %}

    {% if home_all or 'Y' in params or 'X' in params %}
      _SENSORLESS_HOME_Y
    {% endif %}

    {% if home_all or 'X' in params %}
      G90 ; absolute mode
      G0 Y{ max_y - 5 } F5000
      _SENSORLESS_HOME_X
      G91 ; relative mode
      G0 X-10 F5000
    {% endif %}

    {% if home_all or 'Z' in params %}
      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}

      G90 ; absolute mode
      G0 X{175.0+random_x} Y{175.0+random_y} F12000
      G28 Z
      _ADJUST_Z_HOME_FOR_TOOL_OFFSET
    {% endif %}
    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    M400
  {% endif %}


[gcode_macro _SENSORLESS_HOME_X]
variable_home_current_ratio: 0.65
gcode:
    # Always use consistent runG1 E20 F300_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}    
    {% set HOME_CURRENT_X = RUN_CURRENT_Y * home_current_ratio|float %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_X}

    # Home
    G28 X
    # Move away
    G91
    G1 X-5 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _SENSORLESS_HOME_Y]
variable_home_current_ratio: 0.65
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}    
    {% set HOME_CURRENT_Y = RUN_CURRENT_Y * home_current_ratio|float %}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_Y}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-5 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    

; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

[gcode_macro G32]
description: Auto level and home
gcode:
  {%- import homing as h with context -%}
  {h.orient(force=1)}
  
[gcode_macro TEST_ENDSTOP_REPEATABILITY]
variable_cache: {}
gcode:
    {% set axis    = params.get('AXIS','')|upper %}
    {% set cycles  = params.get('CYCLES', 10)|int %}
    {% set retract = params.get('RETRACT', 5)|float %}

    {% if axis not in ['X','Y','Z'] %}
        { action_respond_info("AXIS must be X, Y or Z") }
    {% elif cycles < 2 %}
        { action_respond_info("CYCLES must be ≥ 2") }
    {% else %}
        {% set step_name = 'stepper_' ~ axis|lower %}
        SET_GCODE_VARIABLE MACRO=TEST_ENDSTOP_REPEATABILITY VARIABLE=cache VALUE="{ { 'name': step_name, 'l': [] } }"
        {% set sign = '-' if printer.configfile.settings[step_name].get('homing_positive_dir', False) else '' %}
        { action_respond_info("Running test on %s-axis — %d cycles, retract %.2f mm" % (axis, cycles, retract)) }
        {% for i in range(cycles) %}
            G28 {axis}
            M400
            _TEST_ENDSTOP_REPEATABILITY RECORD={axis}
            G91
            G0 {axis}{sign}{retract}      ; relative retract
            G90
            M400
            G4 P100
        {% endfor %}
        _TEST_ENDSTOP_REPEATABILITY PROCESS={axis}
    {% endif %}

 
[gcode_macro _TEST_ENDSTOP_REPEATABILITY]
gcode:
    {% set cache = printer['gcode_macro TEST_ENDSTOP_REPEATABILITY'].cache %}
    {% if 'RECORD' in params %}
        {% set kin = printer.printer.lookup_object('toolhead').get_kinematics() %}
        {% set ns = namespace(stepper_obj=None) %}
        {% for s in kin.get_steppers() if s.get_name() == cache.name and not ns.stepper_obj %}
                {% set ns.stepper_obj = s %}
        {% endfor %}
        {% set _ = cache.l.append(ns.stepper_obj.get_mcu_position()) %}
        SET_GCODE_VARIABLE MACRO=TEST_ENDSTOP_REPEATABILITY VARIABLE=cache VALUE="{ cache }"
    {% elif 'PROCESS' in params %}
        {% set n = cache.l|length %}
        {% if n < 2 %}
            { action_respond_info("Not enough samples — got %d, need at least 2." % n) }
        {% else %}
            #---< steps/mm
            {% set cfg           = printer.configfile.settings[cache.name] %}
            {% set steps_per_rev = cfg.full_steps_per_rotation|float * cfg.microsteps|float %}
            {% set step_dist     = cfg.rotation_distance|float / steps_per_rev %}
            #---< min|max range
            {% set range_s  = cache.l|max - cache.l|min %}
            {% set range_mm = range_s * step_dist %}
            #---< std dev
            {% set ns       = namespace(ssd=0.0) %}
            {% set avg_s    = (cache.l|sum) / n %}
            {% for v in cache.l %}{% set ns.ssd = ns.ssd + (v - avg_s)**2 %}{% endfor %}
            {% set std_s    = (ns.ssd / n)**0.5 %}
            {% set std_mm   = std_s  * step_dist %}
            #---< report
            {% set _ = action_respond_info( [
                "="*40,
                "Endstop Repeatability Results — %s-axis" % cache.name|replace('stepper_', ''),
                "Cycles Run         : %d"      % n,
                "-"*20,
                "Range (Max-Min)    : %.6f mm  (%d steps)" % (range_mm, range_s),
                "Standard Deviation : %.6f mm  (%.2f steps)" % (std_mm, std_s),
                "-"*20,
                "Raw MCU steps      : %s" % cache.l,
                "="*40 ]|join('\n') ) %}
        {% endif %}
    {% endif %}