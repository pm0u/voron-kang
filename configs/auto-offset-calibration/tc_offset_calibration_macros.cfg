#####################################################################
#  
#  File: tc_offset_calibration_macros.cfg
#  Version: 1.0
#  Last modification date: March 15, 2025
#  Last modified by: Joseph Greiner
#  Copyright (C) 2025 - Joseph Greiner - r2pdx_VT.982 on discord
#
#  License: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
#
#####################################################################
#
#  This file contains the [tool_calibrate] definitions and macros
#  used with Nudge by zruncho
# 
#  github: https://github.com/zruncho3d/nudge
#
#  It uses the tools_calibrate portion of Viesturz
#  klipper-toolchanger add on.
#
#  github: https://github.com/viesturz/klipper-toolchanger
#
#  This file also contains the modified macros and requirements for
#  automatically calibrating the probe position, and tool head
#  gcode offsets for any number of tools defined on the printer.
#
#  github: https://github.com/joseph-greiner/klipper_tc_automatic_offset_calibration
#
#####################################################################
#
#  Instructions:
#
#  This file requires the addition of an offset save file. This is 
#  defined under [tools_calibrate]
#
#  Within the offset_save_file.cfg, add these sections for each tool
#  installed on the printer. t0_xx, t1_xx, t2_xx and on. The macros have been
#  tested to work up to 15 tools.
#    t0_offset_x = 0.0
#    t0_offset_y = 0.0
#    t0_offset_z = 0.0
#    t1_offset_x = 0.0
#    t1_offset_y = 0.0
#    t1_offset_z = 0.0
#
#    If the save file does not have an entry for your tool head, it will error.
#
#####################################################################
#
#  Configuration sections within this file:
#
#      [tools_calibrate]  Parameters for the probe.
#      [save_variables]   Definition for the file to save the offsets to.
#
#  Macros within this file:
#
#      TC_GET_PROBE_POSITION          Gets the position of the probe.
#      TC_FIND_ALL_TOOL_OFFSETS       Find the offsets for all the tools on the printer.
#      TC_FIND_TOOL_OFFSETS           Find the offsets for the specified tool numbers.
#      TC_ADJUST_OFFSET               Adjust a specified offset for a specified tool by a specified amount.
#      _NUDGE_FIND_TOOL_BASELINE      Find the location of the probe vs T0.
#      _NUDGE_MOVE_OVER_PROBE         Moves the tool head over the probe.
#      _TC_SHOW_LAST_RESULT           Shows the last result of tools_calibrate.
#      _TC_SAVE_PROBE_POSITION        Saves the probe position to the save file.
#      _TC_UPDATE_OFFSETS             Saves the offsets to the save file.
#
#####################################################################

#####################################################################
#   tool_calibrate definition
#####################################################################

[tools_calibrate]
# Nudge config
# These two values should be changed or checked for YOUR printer.
# 'pin' should reference the pin used for Nudge.
pin: PC4
# 'spread' is the amount of X or Y motion used in the probing sequence.
# Think of it as the clearance from the center, to accomodate the pin's diameter and any
# initial starting-point inaccuracy.
# For larger pins (5mm), increase this to 3.5mm+.
#   Increase this and/or improve the accuracy of the starting point if the probe triggers too early.
#   Decrease this and/or improve the accuracy of the starting point if the motion
#     pushes your printer beyond the allowed travel amount.
spread: 2.8
#
# Config below is unlikely to need changes.
#
# 'lower_z' is the distance below the probe tip in Z, used to ensure a hit.
#   Increase this to have more of the nozzle hit during probing.
#   Values as low as 0.1mm may work, and will minimize the need for overtravel.
lower_z: 0.2
travel_speed: 100
speed: 2.5
lift_speed: 4
final_lift_z: 4
sample_retract_dist: 3
samples_tolerance: 0.050
samples: 3
samples_result: median
trigger_to_bottom_z: 3
# If using a built-in Z probe to find the Nudge pin top, reference it here.
# This is only relevant for the flipped configuration, to provide resistance to pushing, for Tap/Boop/Poke/etc.
# Most should leave this commented out.
#probe: probe

#  Change this path to somewhere in your config folder
[save_variables]
filename: ~/printer_data/config/configs/auto-offset-calibration/offset_save_file.cfg

#####################################################################
#   TC_GET_PROBE_POSITION
#####################################################################

[gcode_macro TC_GET_PROBE_POSITION]
description: Locate the coordinates of the sensor and save to disk. Position T0 over the probe and run this command.
gcode:
  TOOL_LOCATE_SENSOR
  _TC_SAVE_PROBE_POSITION

#####################################################################
#   TC_FIND_ALL_TOOL_OFFSETS
#####################################################################

[gcode_macro TC_FIND_ALL_TOOL_OFFSETS]
description: Calibrates the offsetts of all tools on the printer, one at a time.
variable_probe_temp: 150
gcode:
  {% set svf = printer.save_variables.variables %}
  {% set num_tools = printer.toolchanger.tool_numbers|length|int %}
  RESPOND MSG="Found {num_tools} tools on printer to set the offsets for."
  # Check if the printer is homed.
  {% if "xyz" not in printer.toolhead.homed_axes %}
      RESPOND MSG="Printer must be homed before finding tool offsets."
  {% else %}
      # Loop through the baseline tool and all other tools.
      {% for i in range(num_tools) %}
        # Switch to the tool for processing.
        T{i}
        # Heat up the toolhead to the probing temperature.
        GO_TO_PURGE
        M109 S{probe_temp} T{i} D0
        # preheat next one if there is one
        {% if i < num_tools - 1 %}
            RESPOND MSG="preheating next tool (T{i+1})"
            M104 S{probe_temp - probe_temp * 0.1} T{i+1}
        {% endif %}
        # Clean the nozzle just in case
        CLEAN_NOZZLE
        # If we are at T0, this is our baseline tool. lets get that squared away.
        {% if i == 0 %}
          # Ensure ALL offsets are cleared for T0 probing.
          SET_GCODE_OFFSET X=0 Y=0 Z=0
          # Get the baseline for T0 position relative to the nudge probe.
          _NUDGE_FIND_TOOL_BASELINE
          # Let the user know that the baseline measurements have been processed.
          _TC_SHOW_LAST_RESULT
          RESPOND MSG="T0 baseline coordinates are:"
          # Cool off the toolhead if we are not printing.
          {% if printer.idle_timeout.state != "Printing" %}
            M104 S0 T{i}
          {% endif %}
        {% else %}
          # Move the active tool over the probe.
          _NUDGE_MOVE_OVER_PROBE
          # Calibrate the offset.
          TOOL_CALIBRATE_TOOL_OFFSET
          # Update and save tool offsets.
          _TC_UPDATE_OFFSETS TOOL={i}
          RESPOND MSG="Offsets for T{i} updated to:"
          RESPOND MSG="Tool T{i} finished processing."
          {% if printer.idle_timeout.state != "Printing" %}
            M104 S0 T{i}
          {% endif %}
        {% endif %}
      {% endfor %}
      # Switch to T0.
      T0
      {% if printer.idle_timeout.state != "Printing" %}
        {% set feed = printer['configfile'].config["tools_calibrate"]["travel_speed"]|int * 60  %}
        # Move to the center of the bed.
        G0 X{printer.configfile.config.stepper_x.position_max|float / 2} Y{printer.configfile.config.stepper_y.position_max|float / 2} F{feed}
      {% endif %}
    {% endif %}

#####################################################################
#   TC_FIND_TOOL_OFFSETS
#####################################################################

[gcode_macro TC_FIND_TOOL_OFFSETS]
description: Calibrates the offsetts of the specified tool or tools. Usage: TC_FIND_TOOL_OFFSETS TOOL=x,x,x
variable_probe_temp: 150
gcode:
  {% set svf = printer.save_variables.variables %}
  {% set tool_nums = "0," + params.TOOL|default("1") %}
  {% set initial_tool = [printer.toolchanger.tool_number, 0] | max %}
  {% set tools_to_adjust = tool_nums.split(",") %}
  # Let the user know how many tools we are going to process
  RESPOND MSG="Found {tools_to_adjust|length - 1} tools to get the offsets for."
  # Check if the printer is homed.
  {% if "xyz" not in printer.toolhead.homed_axes %}
      RESPOND MSG="Printer must be homed before finding tool offsets."
  {% else %}
  # Loop through the baseline tool and all other tools.
      {% for i in range(tools_to_adjust|length) %}
        RESPOND MSG="{tools_to_adjust[i]}"
        # Switch to the tool for processing.
        T{tools_to_adjust[i]}
        # Heat up the toolhead to the probing temperature.
        M109 S{probe_temp} T{tools_to_adjust[i]} D0
        # preheat next one if there is one
        {% if i < (tools_to_adjust|length) - 1 %}
            M104 S{probe_temp - probe_temp * 0.1} T{tools_to_adjust[i+1]}
        {% endif %}
        # Clean the nozzle just in case
        CLEAN_NOZZLE
        # If we are at T0, this is our baseline tool. lets get that squared away.
        {% if tools_to_adjust[i]|int == 0 %}
          # Ensure ALL offsets are cleared for T0 probing.
          SET_GCODE_OFFSET X=0 Y=0 Z=0
          # Get the baseline for T0 position relative to the nudge probe.
          _NUDGE_FIND_TOOL_BASELINE
          # Let the user know that the baseline measurements have been processed.
          _TC_SHOW_LAST_RESULT
          RESPOND MSG="T0 baseline coordinates are:"
          # Cool off the toolhead if we are not printing.
          {% if printer.idle_timeout.state != "Printing" %}
            M104 S0 T{tools_to_adjust[i]}
          {% endif %}
        {% else %}
          # Move the active tool over the probe.
          _NUDGE_MOVE_OVER_PROBE
          # Calibrate the offset.
          TOOL_CALIBRATE_TOOL_OFFSET
          # Update and save tool offsets.
          _TC_UPDATE_OFFSETS TOOL={tools_to_adjust[i]}
          RESPOND MSG="Offsets for T{tools_to_adjust[i]} updated to:"
          RESPOND MSG="Tool T{tools_to_adjust[i]} finished processing."
          {% if printer.idle_timeout.state != "Printing" %}
            M104 S0 T{tools_to_adjust[i]}
          {% endif %}
        {% endif %}
      {% endfor %}
      # Switch back to the original tool we had
      T{initial_tool}
      {% if printer.idle_timeout.state != "Printing" %}
        {% set feed = printer['configfile'].config["tools_calibrate"]["travel_speed"]|int * 60  %}
        # Move to the center of the bed.
        G0 X{printer.configfile.config.stepper_x.position_max|float / 2} Y{printer.configfile.config.stepper_y.position_max|float / 2} F{feed}
      {% endif %}
  {% endif %}

#####################################################################
#   TC_ADJUST_OFFSET
#####################################################################
[gcode_macro TC_ADJUST_OFFSET]
description: Adjust an offset by specifying tool, axis, and amount to adjust.
             TC_ADJUST_OFFSET TOOL=1 AXIS=X AMOUNT=0.050
gcode:
  {% set tool_num = params.TOOL|default(-1)|int %}
  {% set axis = params.AXIS|default(' ')|lower %}
  {% set amount = params.AMOUNT|default(0.000)|float|round(3) %}
  {% if (tool_num != -1) %}
    {% if (axis == 'x') or (axis == 'y') or (axis == 'z')  %}
      {% if amount != 0.000 %}
        RESPOND MSG="Adjusting T{tool_num} {axis}_axis gcode offset  by {amount}mm."
        # Setup the variables we need
        {% set svf = printer.save_variables.variables %}
        # Pull the current value and adjust the offset by the sent amount.
        {% set new_val = svf[ 't' + tool_num|string + '_offset_' + axis|string]|float|round(3) + amount|float|round(3) %}
        # Save the new value to the save file.
        SAVE_VARIABLE VARIABLE={'t' + tool_num|string + '_offset_' + axis|string} VALUE={new_val}
        {% if printer.toolchanger.tool_number == tool_num %}
          # We are currently using the tool, updage the gcode offset NOW
          SET_GCODE_OFFSET {axis}={new_val|float|round(3)} MOVE=1
        {% endif %}
      {% else %}
        RESPOND MSG="Error: Amount to adjust must be specified."
      {% endif %}
    {% elif axis == ' ' %}
      RESPOND MSG="Error: Axis must be specified."
    {% else %}
      RESPOND MSG="Error: Unknown axis: {axis}. Only X, Y, or Z supported."
    {% endif %}
  {% else %}
    RESPOND MSG="Error: Tool must be specified."
  {% endif %}

#####################################################################
#   _NUDGE_FIND_TOOL_BASELINE
#####################################################################

[gcode_macro _NUDGE_FIND_TOOL_BASELINE]
description: Find the location of the probe for the tool head.
gcode:
  _NUDGE_MOVE_OVER_PROBE
  TOOL_LOCATE_SENSOR

#####################################################################
#   _NUDGE_MOVE_OVER_PROBE
#####################################################################

[gcode_macro _NUDGE_MOVE_OVER_PROBE]
description: Move tool head to probing position.
gcode:
  {% set svf = printer.save_variables.variables %}
  {% set feed = printer['configfile'].config["tools_calibrate"]["travel_speed"]|int * 60  %}
  # Pull Nudge location from the save file position
  {% if svf.nudge_position_x|int == -1000 %}
    RESPOND MSG="Probe position is not set, attempting to move to X{svf.nudge_position_x}"
  {% else %}
    G0 X{svf.nudge_position_x} Y{svf.nudge_position_y} Z{svf.nudge_position_z} F{feed}
  {% endif %}

#####################################################################
#   _TC_SHOW_LAST_RESULT
#####################################################################

[gcode_macro _TC_SHOW_LAST_RESULT]
description: Show the last results from tools_calibrate or tool_locate_sensor
gcode:
    RESPOND MSG="X: {printer.tools_calibrate.last_x_result|float|round(3)}  Y: {printer.tools_calibrate.last_y_result|float|round(3)} Z: {printer.tools_calibrate.last_z_result|float|round(3)}"

#####################################################################
#   _TC_SAVE_PROBE_POSITION
#####################################################################

[gcode_macro _TC_SAVE_PROBE_POSITION]
description: Update the nudge position from the last probe sequesnce.
gcode:
    {% set svf = printer.save_variables.variables %}
    # Update the variables that hold the offsets
    SAVE_VARIABLE VARIABLE=nudge_position_x VALUE={printer.tools_calibrate.last_x_result|float|round(3)}
    SAVE_VARIABLE VARIABLE=nudge_position_y VALUE={printer.tools_calibrate.last_y_result|float|round(3)}
    # Add 3mm to the Z height, we don't want to crash a nozzle into the probe.
    SAVE_VARIABLE VARIABLE=nudge_position_z VALUE={printer.tools_calibrate.last_z_result|float|round(3) + 3}
    # Notify the user that the coordinates have been saved.
    RESPOND MSG="X: {printer.tools_calibrate.last_x_result|float|round(3)}  Y: {printer.tools_calibrate.last_y_result|float|round(3)} Z: {printer.tools_calibrate.last_z_result|float|round(3) + 3.000}"
    RESPOND MSG="Nudge coordinates saved as:"

#####################################################################
#   _TC_UPDATE_OFFSETS
#####################################################################

[gcode_macro _TC_UPDATE_OFFSETS]
description: Update the offsets gotten from the last probe sequesnce.
gcode:
    {% set svf = printer.save_variables.variables %}
    {% set tool_number = params.TOOL|int %}
    
    # Update the variables that hold the offsets
    SAVE_VARIABLE VARIABLE={'t' + tool_number|string + '_offset_x'} VALUE={printer.tools_calibrate.last_x_result|float|round(3)}
    SAVE_VARIABLE VARIABLE={'t' + tool_number|string + '_offset_y'} VALUE={printer.tools_calibrate.last_y_result|float|round(3)}
    SAVE_VARIABLE VARIABLE={'t' + tool_number|string + '_offset_z'} VALUE={printer.tools_calibrate.last_z_result|float|round(3)}
    # Show us the saved offsets
    RESPOND MSG="X: {printer.tools_calibrate.last_x_result|float|round(3)}  Y: {printer.tools_calibrate.last_y_result|float|round(3)} Z: {printer.tools_calibrate.last_z_result|float|round(3)}"
    # Apply the offsets to The tool
    SET_GCODE_OFFSET X={printer.tools_calibrate.last_x_result|float|round(3)} Y={printer.tools_calibrate.last_y_result|float|round(3)} Z={printer.tools_calibrate.last_z_result|float|round(3)} MOVE=1